const {init} = require('../../managers');
const {__} = require('../../modules/Messages');
const {markMessageToDelete} = require('../../modules/deleteMessageMiddleware');
const moment = require('moment');

let profileManager = init('profile');
let plumcore = init('plumcore', profileManager);
let payment = init('payment');

function toggleFavorite(item, ctx) {
    return profileManager.toggleInFavourites(ctx.session.profile, item);
}

async function getAction(ctx, item) {
    let profile = ctx.session.profile;
    let hasAccess = plumcore.hasItemAccess(item, profile);
    ctx.session.lastItem = item;

    return hasAccess
        ? {button: {code: 'action', text: 'üì•'}, route: async (item, ctx) => {
                let chatId = ctx.from.id;
                await plumcore.sendFiles(chatId, item);
                return ctx.scene.reenter();
            }}
        : {button: {code: 'action', text: 'üí≥'}, route: async (item, ctx) => {
                if (ctx.session.catalogMessage) {
                    markMessageToDelete(ctx, ctx.session.catalogMessage);
                    ctx.session.catalogMessage = false;
                }

                return ctx.scene.enter('payment', {item});
            }};
}

async function saveSettings(profile, ctx) {
    ctx.session.profile = await profileManager.saveProfile(profile);
}

function getSelectedCategoryIds(ctx) {
    return ctx.session.profile.category || [];
}

function getAllCategories() {
    return plumcore.categoriesList();
}

async function getItemAtIndex(currentIndex, ctx) {
    let searchType = ctx.scene.state.type || false;
    let categoryIds = getSelectedCategoryIds(ctx);

    return plumcore.discoverAtIndex(categoryIds, ctx.session.profile, currentIndex, searchType);
}

function getEmptyText() {
    return `–ü–æ—Ö–æ–∂–µ —Ç—É—Ç –ø–æ–∫–∞ —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. 

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.`;
}

function getSettingsText() {
    return `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—É—Ä—Å–æ–≤. –ú–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ`;
}

function getItemDescription(item) {
    return __(`<b>${item.title}</b>

${item.description || ''}

–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å/–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏: @plumcoresup –∏–ª–∏ –∂–º–∏—Ç–µ –Ω–∞ üí≥

<b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞</b>: ${item.originalPrice ? item.originalPrice+'—Ä' : ''}
<b>–¶–µ–Ω–∞ –≤—ã–∂–∏–º–∫–∏</b>: ${item.price}—Ä`, ['content', 'course', 'learn']);
}

function getItemImage(item) {
    return item.photos && item.photos[0] ? item.photos[0] : false;
}

function getLastVisit(ctx) {
    return ctx && ctx.session && ctx.session.profile
        ? ctx.session.profile.lastVisit
        : false;
}

async function setLastVisit(ctx) {
    let profile = ctx.session.profile;
    profile.lastVisit = moment().unix();
    return saveSettings(profile, ctx);
}

module.exports = {
    disclaimer: {text: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlumCoreMarket!

–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—ã–∂–∏–º–∫–∏ –∫—É—Ä—Å–æ–≤ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º.

–í—ã–±–∏—Ä–∞–π—Ç–µ, —Å–∫–∞—á–∏–≤–∞–π—Ç–µ –∏ –æ—Å–≤–∞–∏–≤–∞–π—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –≤ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã. –ë–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã –∏ —Å–∫—É—á–Ω—ã—Ö —Ä–∞—Å—Å–∫–∞–∑–æ–≤ –Ω–µ –ø–æ —Ç–µ–º–µ.`, tags: ['content', 'intro', 'learn']},
    skipCategories: true,
    payment,
    plumcore,
    toggleFavorite,
    getAction,
    saveSettings,
    getSelectedCategoryIds,
    getAllCategories,
    getItemAtIndex,
    getEmptyText,
    getSettingsText,
    getItemDescription,
    getItemImage,
    getLastVisit,
    setLastVisit,
    onSuccessfulPayment: plumcore.finishPayment.bind(plumcore),
    checkSubmenu() { return true; }
}