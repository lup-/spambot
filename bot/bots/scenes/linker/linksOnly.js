const BaseScene = require('telegraf/scenes/base');
const {getSingleChatInfo, generateNewLink, saveChatInfo, addLinkToChat, getChannels} = require('../../actions/linkProcessing');
const {getDb} = require('../../../modules/Database');
const {menu} = require('../../helpers/wizard');
const {clone} = require('../../helpers/common');

module.exports = function () {
    const scene = new BaseScene('linksOnly');

    scene.enter(async ctx => {
        let chat = ctx.scene.state.chat;
        let linksCount = ctx.scene.state.linksCount || 0;
        let usersLimit = ctx.scene.state.usersLimit || 0;
        let timeLimitInHours = ctx.scene.state.timeLimitInHours || 0;

        if (chat && linksCount > 0) {
            let infoText = `<b>–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞</b>:  ${chat.title || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}

<b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Å—ã–ª–æ–∫</b>:  ${ctx.scene.state.title || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}
            
<b>–°–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å</b>: ${linksCount}

<b>–ú–∞–∫—Å–∏–º—É–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø–æ –Ω–æ–≤—ã–º —Å—Å—ã–ª–∫–∞–º</b>: ${usersLimit > 0 ? usersLimit : '–Ω–µ—Ç'}

<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∂–∏–∑–Ω–∏ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —á–∞—Å–∞—Ö</b>: ${timeLimitInHours > 0 ? timeLimitInHours : '–Ω–µ—Ç'}
`;

            return ctx.replyWithDisposableHTML(infoText, menu([
                {code: 'replaceTitle', text: '–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã'},
                {code: 'linksCount', text: '–ü–æ–º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫'},
                {code: 'usersLimit', text: '–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'},
                {code: 'timeLimitInHours', text: '–õ–∏–º–∏—Ç –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–æ–∫'},
                {code: 'makeLinks', text: 'üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üé≤'},
                {code: 'back', text: '‚¨Ö –í –º–µ–Ω—é —Å—Å—ã–ª–æ–∫'},
            ], 1));
        }

        ctx.scene.state.waiting = 'linksCount';
        return ctx.replyWithDisposableHTML(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–µ–≥–µ–Ω—Ä–∏—Ä–æ–≤–∞—Ç—å`);
    });

    scene.action('replaceChat', ctx => {
        ctx.scene.state.chat = null;
        ctx.scene.state.title = null;
        ctx.scene.state.waiting = 'chat';
        return ctx.scene.reenter();
    });

    scene.action('replaceTitle', ctx => {
        ctx.scene.state.waiting = 'title';
        return ctx.replyWithDisposableHTML('–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫');
    });

    scene.action('linksCount', ctx => {
        ctx.scene.state.linksCount = null;
        return ctx.scene.reenter();
    });

    scene.action('usersLimit', ctx => {
        ctx.scene.state.waiting = 'usersLimit';
        return ctx.replyWithDisposableHTML('–ü—Ä–∏—à–ª–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø–æ –Ω–æ–≤—ã–º —Å—Å—ã–ª–∫–∞–º');
    });

    scene.action('timeLimitInHours', ctx => {
        ctx.scene.state.waiting = 'timeLimitInHours';
        return ctx.replyWithDisposableHTML('–ü—Ä–∏—à–ª–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø–æ –Ω–æ–≤—ã–º —Å—Å—ã–ª–∫–∞–º');
    });

    scene.action('makeLinks', async ctx => {
        let chat = ctx.scene.state.chat;
        let linksCount = ctx.scene.state.linksCount || 0;
        let usersLimit = ctx.scene.state.usersLimit || 0;
        let timeLimitInHours = ctx.scene.state.timeLimitInHours || 0;
        let title = ctx.scene.state.title;

        let results = {success: 0, errors: 0};
        let db = await getDb();

        await ctx.replyWithDisposableHTML('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞—Ç–∞...');

        let errors = {};
        let generatedList = [];
        for (let index = 0; index < linksCount; index++) {
            let link = null;

            try {
                link = await generateNewLink(chat, usersLimit, timeLimitInHours, ctx.telegram);
                await addLinkToChat(chat, link);
            }
            catch (e) {
                errors[chat.id] = e;
                results.errors++;
                continue;
            }

            let chatNoExtraFields = clone(chat);
            let userId = ctx.from.id;
            delete chatNoExtraFields.invite_links;

            let linkRecord = {
                type: 'link',
                userId,
                title,
                usersLimit,
                timeLimitInHours,
                chat: chatNoExtraFields,
                newLink: link,
            }

            try {
                await db.collection('generated').insertOne(linkRecord);
                generatedList.push({title, link});

                results.success++;
            }
            catch (e) {
                results.errors++;
            }
        }

        await ctx.replyWithDisposableHTML(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n\n–£—Å–ø–µ—à–Ω–æ: ${results.success}\n–û—à–∏–±–æ–∫: ${results.errors}`);

        if (results.errors > 0) {
            let uniqueErrors = Object.values(errors).map(e => e.message).filter( (msg, index, all) => all.indexOf(msg) === index );
            return await ctx.replyWithDisposableHTML(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:\n\n${uniqueErrors.join('\n')}`, menu([
                {code: 'back', text: '–í –º–µ–Ω—é'},
                {code: 'retry', text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'}
            ], 1));
        }

        if (results.success > 0) {
            let linksList = generatedList.map(generated => generated.link).join('\n');
            let extra = menu([
                {code: 'back', text: '–í –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞'},
                {code: 'reset', text: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ'}
            ], 1);
            extra.disable_web_page_preview = true;

            return await ctx.reply(`–ù–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${chat.title}:\n\n${linksList}`, extra);
        }
    });

    scene.action('back', ctx => ctx.scene.enter('linksMenu', {chat: ctx.scene.state.chat}));
    scene.action('retry', ctx => ctx.scene.reenter());
    scene.action('reset', ctx => {
        ctx.scene.state.channels = null;
        ctx.scene.state.linksCount = null;
        ctx.scene.state.usersLimit = null;
        ctx.scene.state.timeLimitInHours = null;
        ctx.scene.state.title = null;
        ctx.scene.state.waiting = null;
        ctx.scene.reenter();
    });

    scene.on('message', async (ctx, next) => {
        let post = ctx && ctx.update && ctx.update.message
            ? ctx.update.message
            : null;

        if (ctx.scene.state.waiting === 'chat') {
            let link = post.text;
            let chat = await getSingleChatInfo(link, ctx)
            if (chat) {
                await saveChatInfo([chat]);

                ctx.scene.state.chat = chat;
                ctx.scene.state.title = chat.title;
            }
            else {
                return ctx.replyWithDisposableHTML('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∏–Ω—É—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É', menu([{code: 'back', text: '‚¨Ö –ù–∞–∑–∞–¥'}]));
            }
        }

        if (ctx.scene.state.waiting === 'linksCount') {
            try {
                ctx.scene.state.linksCount = parseInt(post.text);
            }
            catch (e) {
                ctx.scene.state.linksCount = 0;
            }
        }

        if (ctx.scene.state.waiting === 'title') {
            ctx.scene.state.title = post.text;
        }

        if (ctx.scene.state.waiting === 'usersLimit') {
            try {
                ctx.scene.state.usersLimit = parseInt(post.text);
            }
            catch (e) {
                ctx.scene.state.usersLimit = 0;
            }
        }

        if (ctx.scene.state.waiting === 'timeLimitInHours') {
            try {
                ctx.scene.state.timeLimitInHours = parseInt(post.text);
            }
            catch (e) {
                ctx.scene.state.timeLimitInHours = 0;
            }
        }

        if (ctx.scene.state.waiting) {
            ctx.markMessageToDelete(ctx, ctx.update.message);
        }

        ctx.scene.state.waiting = false;
        return ctx.scene.reenter();
    });

    return scene;
}