const BaseScene = require('telegraf/scenes/base');
const {menu} = require('../../helpers/wizard');
const {__} = require('../../../modules/Messages');

function routeToNextStep(ctx) {
    try {
        let hasPassedSettings = ctx.session && ctx.session.profile && ctx.session.profile.category;
        if (hasPassedSettings) {
            return ctx.scene.enter('discover');
        }
        else {
            return ctx.scene.enter('settings');
        }
    }
    catch (e) {}
}

module.exports = function (params) {
    const scene = new BaseScene('intro');
    const {disclaimer, getLastVisit, setLastVisit, plumcore} = params;

    const introAction = typeof (params.introAction) !== 'undefined'
        ? params.introAction
        : false;

    scene.enter(async ctx => {
        let profile = ctx.session.profile || {};
        let messageShown = ctx.session.introShown || false;
        let hasFavorites = profile && profile.favorite && profile.favorite.length > 0;
        let hasOwned = profile && profile.owned && profile.owned.length > 0;
        let hasSubscription = plumcore.hasSubscription(profile);

        if (introAction) {
            await introAction(ctx);
        }

        if (messageShown) {
            let buttons = [];
            buttons.push({code: 'list', text: '–í –∫–∞—Ç–∞–ª–æ–≥'});

            if (!hasSubscription) {
                buttons.push({code: 'subscribe', text: '–ü—Ä–µ–º–∏—É–º'});
            }

            if (hasOwned) {
                buttons.push( {code: 'owned', text: '–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏'});
            }

            if (hasFavorites) {
                buttons.push( {code: 'favorite', text: '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'});
            }

            if (hasSubscription) {
                buttons.push({code: 'unsubscribe', text: '–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º'});
            }

            return ctx.reply('–ö—É–¥–∞ –¥–∞–ª—å—à–µ?', menu(buttons, 1));
        }

        try {
            ctx.session.introShown = true;
            return ctx.replyWithHTML(disclaimer.text, menu([{code: 'accept', text: '–ü–æ–Ω—è—Ç–Ω–æ'}]));
        }
        catch (e) {
        }
    });

    scene.action('subscribe', ctx => ctx.scene.enter('subscribe'));
    scene.action('unsubscribe', ctx => ctx.scene.enter('unsubscribe'));

    scene.action('accept', ctx => {
        return ctx.replyWithHTML(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –¥–µ—Å—è—Ç–∫–∏ —á–∞—Å–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤—ã–∂–∏–º–∫—É –∏ —Å—Ä–∞–∑—É –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É. –ù–æ –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ.

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>

‚óÄÔ∏è ‚Äî –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å
‚ñ∂Ô∏è ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –∫—É—Ä—Å
üé≤ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –∫—É—Ä—Å
üí≥ ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
‚≠êÔ∏è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚Ü©Ô∏è ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
üîß ‚Äî –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, menu([{code: 'list', text: '–ù–∞—á–∞—Ç—å'}]));
    });

    scene.action('list', ctx => ctx.scene.enter('discover'));
    scene.action('owned', ctx => ctx.scene.enter('discover', {type: 'owned'}));
    scene.action('favorite', ctx => ctx.scene.enter('discover', {type: 'favorite'}));
    scene.action('new', async ctx => {
        let lastVisit = getLastVisit(ctx);
        await setLastVisit(ctx);
        return ctx.scene.enter('discover', {type: 'new', lastVisit});
    });

    return scene;
}