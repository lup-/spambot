const axios = require('axios');
const BaseScene = require('telegraf/scenes/base');
const {parseFile, extractContacts, splitFio, extractSalary} = require('../../parsers/resume');
const {menu} = require('../../helpers/wizard');
const {__} = require('../../../modules/Messages');

function getContacts(candidate) {
    let contacts = candidate.contacts;
    if (!contacts) {
        return false;
    }

    let cardContacts = [];
    if (candidate.contacts.phone) {
        cardContacts = cardContacts.concat(candidate.contacts.phone);
    }

    if (candidate.contacts.email) {
        cardContacts.push(candidate.contacts.email);
    }

    if (candidate.contacts.telegram) {
        cardContacts.push(candidate.contacts.telegram);
    }

    return cardContacts.join('\n');
}

function getResumeCard(candidate) {
    return `<b>${candidate.name || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</b>

<b>–ì–æ—Ä–æ–¥:</b>
${candidate.city || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

<b>–ñ–µ–ª–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è:</b>
${candidate.position || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

<b>–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ:</b>
${candidate.salary ? candidate.salary.value + ' ' + (candidate.salary.currency ? candidate.salary.currency : '') : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
${getContacts(candidate) || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
`;
}

function editMenu(ctx) {
    return menu([
        {code: 'save', text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å üëç'},
        {code: 'name', text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è'},
        {code: 'city', text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥'},
        {code: 'position', text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é'},
        {code: 'salary', text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É'},
        {code: 'contacts', text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã'},
        {code: 'upload', text: ctx.scene.state.document ? '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'},
        {code: 'cancel', text: '–û—Ç–º–µ–Ω–∞'},
    ], 1);
}

module.exports = function ({vacancies}) {
    const scene = new BaseScene('resume');

    scene.enter(async ctx => {
        return ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–≤–æ–∏–º —Ä–µ–∑—é–º–µ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –ø–æ–¥ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä –º–æ–≥ —Å—Ä–∞–∑—É —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: pdf, docx, doc, odt, rtf, txt`, menu([{code: 'no_file', text: '–£ –º–µ–Ω—è –Ω–µ—Ç —Ñ–∞–π–ª–∞'}]));
    });

    scene.on('document', async ctx => {
        let document = ctx.update.message && ctx.update.message.document
            ? ctx.update.message.document
            : false;

        if (!document) {
            return ctx.scene.reenter();
        }

        ctx.reply('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞');

        let fileId = document.file_id;
        let fileLink = await ctx.tg.getFileLink(fileId);
        let response = await axios.get(fileLink, {responseType: 'arraybuffer'});
        let buffer = response.data;
        let name = document.file_name;
        let type = document.mime_type;

        let {candidate, docText} = await parseFile({name, type, buffer});
        ctx.scene.state.candidate = candidate;
        ctx.scene.state.docText = docText;
        ctx.scene.state.document = document;

        let extra = editMenu(ctx);
        extra.caption = getResumeCard(candidate);
        extra.parse_mode = 'HTML';

        return ctx.replyWithDocument(fileId, extra);
    });
    scene.on('text', async ctx => {
        let text = ctx.update.message.text.trim();
        let target = ctx.scene.state.messageTarget;

        switch (target) {
            case 'name':
                ctx.scene.state.candidate.name = text;
                ctx.scene.state.candidate.nameParts = splitFio(text);
                break;
            case 'city':
                ctx.scene.state.candidate.city = text;
                break;
            case 'position':
                ctx.scene.state.candidate.position = text;
                break;
            case 'salary':
                ctx.scene.state.candidate.salary = extractSalary(text);
                break;
            case 'contacts':
                ctx.scene.state.candidate.contacts = extractContacts(text);
                break;
        }

        let candidate = ctx.scene.state.candidate;

        if (ctx.scene.state.document) {
            let fileId = ctx.scene.state.document.file_id;

            let extra = editMenu(ctx);
            extra.caption = getResumeCard(candidate);
            extra.parse_mode = 'HTML';

            return ctx.replyWithDocument(fileId, extra);
        }
        else {
            ctx.replyWithHTML(getResumeCard(candidate), editMenu(ctx));
        }
    });

    scene.action('upload', ctx => ctx.scene.reenter());
    scene.action('cancel', ctx => ctx.scene.enter('intro'));

    scene.action('name', ctx => {
        ctx.scene.state.messageTarget = 'name';
        return ctx.reply('–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –¢—É—á–∫–∏–Ω –õ–µ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∏—á');
    });
    scene.action('city', ctx => {
        ctx.scene.state.messageTarget = 'city';
        return ctx.reply('–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –î—É–¥–∏–Ω–∫–∞');
    });
    scene.action('position', ctx => {
        ctx.scene.state.messageTarget = 'position';
        return ctx.reply('–ù–∞–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—É—é –ø–æ–∑–∏—Ü–∏—é.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∞–¥–æ–≤–Ω–∏–∫');
    });
    scene.action('salary', ctx => {
        ctx.scene.state.messageTarget = 'salary';
        return ctx.reply('–ù–∞–ø–∏—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 980000 —Ä—É–± –∏–ª–∏ 100 usd');
    });
    scene.action('contacts', ctx => {
        ctx.scene.state.messageTarget = 'contacts';
        return ctx.reply('–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã. –•–æ—Ç—è-–±—ã –ø–æ—á—Ç—É –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nnoop@hello.com\n+7 (999) 123-45-56\n Telegram: @BeemBam_bot');
    });
    scene.action('no_file', ctx => {
        ctx.scene.state.candidate = {};
        ctx.scene.state.docText = false;
        ctx.scene.state.document = false;
        return ctx.replyWithHTML(getResumeCard(ctx.scene.state.candidate), editMenu(ctx));
    });

    scene.action('save', async ctx => {
        let candidate = ctx.scene.state.candidate;
        let userId = ctx.session.profile.userId;
        let text = ctx.scene.state.docText ? ctx.scene.state.docText : false;
        let fileId = ctx.scene.state.document ? ctx.scene.state.document.file_id : false;

        await vacancies.saveResume(candidate, fileId, text, userId);
        ctx.replyWithHTML(__('–†–µ–∑—é–º–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!', ['settings', 'success', 'saved']));
        return ctx.scene.enter('intro');
    });

    return scene;
}