version: "3.7"

services:
  orfo_bot:
    image: node
    container_name: 'orfo_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - languagetool
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=orfo_bot
      - BOT_TOKEN=${ORFO_BOT_TOKEN}
      - BOT_NAME=orfo_bot
      - LANGTOOL_API_URL= http://languagetool:8010/
    command: npm run orfo_bot

  grammar_bot:
    image: node
    container_name: 'grammar_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - languagetool
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=grammar_bot
      - BOT_TOKEN=${GRAMMAR_BOT_TOKEN}
      - BOT_NAME=grammar_bot
      - LANGTOOL_API_URL= http://languagetool:8010/
    command: npm run orfo_bot

  ytdlc_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_ytdlc"
    container_name: 'ytdlc_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./files:/downloads
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=ytdlc_bot
      - BOT_NAME=ytdlc_bot
      - BOT_TOKEN=${YTDLC_BOT_TOKEN}
    command: npm run ytdlc_bot

  ttdlc_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_ytdlc"
    container_name: 'ttdlc_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./files:/downloads
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=ttdlc_bot
      - BOT_NAME=ttdlc_bot
      - BOT_TOKEN=${TTDLC_BOT_TOKEN}
    command: npm run ttdlc_bot

  dating_bot:
    image: node
    container_name: 'dating_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=dating_bot
      - BOT_NAME=dating_bot
      - BOT_TOKEN=${DATING_BOT_TOKEN}
    command: npm run dating_bot

  wiki_bot:
    image: node
    container_name: 'wiki_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=wiki_bot
      - BOT_NAME=wiki_bot
      - BOT_TOKEN=${WIKI_BOT_TOKEN}
    command: npm run wiki_bot

  horoscope_bot:
    image: node
    container_name: 'horoscope_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=horoscope_bot
      - BOT_NAME=horoscope_bot
      - BOT_TOKEN=${HOROSCOPE_BOT_TOKEN}
    command: npm run horoscope_bot

  pdd_bot:
    image: node
    container_name: 'pdd_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=pdd_bot
      - BOT_NAME=pdd_bot
      - BOT_TOKEN=${PDD_BOT_TOKEN}
    command: npm run pdd_bot

  film_bot:
    image: node
    container_name: 'film_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - REDIS_HOST=redis
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=film_bot
      - BOT_TOKEN=${FILM_BOT_TOKEN}
      - BOT_NAME=film_bot
      - TMDB_KEY=${TMDB_V3_KEY}
    command: npm run film_bot

  present_bot:
    image: node
    container_name: 'present_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=present_bot
      - BOT_TOKEN=${PRESENT_BOT_TOKEN}
      - BOT_NAME=present_bot
    command: npm run present_bot

  symptoms_bot:
    image: node
    container_name: 'symptoms_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=symptoms_bot
      - BOT_TOKEN=${SYMPTOMS_BOT_TOKEN}
      - BOT_NAME=symptoms_bot
    command: npm run symptoms_bot

  podcast_bot:
    image: node
    container_name: 'podcast_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=podcast_bot
      - BOT_TOKEN=${PODCAST_BOT_TOKEN}
      - BOT_NAME=podcast_bot
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    command: npm run podcast_bot

  languagetool:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_languagetool"
    container_name: 'languagetool'
    restart: always
    working_dir: /LanguageTool-5.1
    command: "java -cp languagetool-server.jar  org.languagetool.server.HTTPServer --port 8010 --public --allow-origin '*'"

  mongo:
    image: mongo
    container_name: 'aquarium_mongo'
    restart: always
    volumes:
      - ./database:/data/db
    ports:
      - 127.0.0.1:${MONGO_PORT}:27017

  redis:
    image: redis
    container_name: 'aquarium_redis'

  admin:
    image: nginx
    container_name: 'bots_nginx'
    ports:
      - ${HTTP_PORT}:80
    volumes:
      - ./admin/dist:/var/www/public
      - ./etc/nginx/site.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend

  backend:
    image: node
    container_name: 'bots_backend'
    ports:
      - ${BACKEND_PORT}:3000
      - ${BACKEND_DEBUG_PORT}:9229
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/bot
      - ./backend:/var/www
      - type: bind
        source: ./docker-compose-prod.yml
        target: /var/docker-compose.yml
      - type: bind
        source: ./.env
        target: /var/.env
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - MONGO_DB=botofarmer
      - REDIS_HOST=aquarium_redis
      - PG_HOST=${PG_HOST}
      - PG_PORT=${PG_PORT}
      - PG_USER=${PG_USER}
      - PG_PASS=${PG_PASS}
    command: npm run debug
