version: "3.7"

services:
  orfo_bot:
    image: node
    container_name: 'orfo_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - languagetool
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=orfo_bot
      - BOT_TOKEN=${ORFO_BOT_TOKEN}
      - BOT_NAME=orfo_bot
      - LANGTOOL_API_URL= http://languagetool:8010/
    command: npm run orfo_bot

  grammar_bot:
    image: node
    container_name: 'grammar_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - languagetool
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=grammar_bot
      - BOT_TOKEN=${GRAMMAR_BOT_TOKEN}
      - BOT_NAME=grammar_bot
      - LANGTOOL_API_URL= http://languagetool:8010/
    command: npm run orfo_bot

  ytdlc_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_ytdlc"
    container_name: 'ytdlc_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - /mnt/lib/files:/downloads
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=ytdlc_bot
      - BOT_NAME=ytdlc_bot
      - BOT_TOKEN=${YTDLC_BOT_TOKEN}
    command: npm run ytdlc_bot

  ttdlc_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_ytdlc"
    container_name: 'ttdlc_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - /mnt/lib/files:/downloads
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=ttdlc_bot
      - BOT_NAME=ttdlc_bot
      - BOT_TOKEN=${TTDLC_BOT_TOKEN}
    command: npm run ttdlc_bot

  dating_bot:
    image: node
    container_name: 'dating_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=dating_bot
      - BOT_NAME=dating_bot
      - BOT_TOKEN=${DATING_BOT_TOKEN}
    command: npm run dating_bot

  wiki_bot:
    image: node
    container_name: 'wiki_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=wiki_bot
      - BOT_NAME=wiki_bot
      - BOT_TOKEN=${WIKI_BOT_TOKEN}
    command: npm run wiki_bot

  horoscope_bot:
    image: node
    container_name: 'horoscope_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=horoscope_bot
      - BOT_NAME=horoscope_bot
      - BOT_TOKEN=${HOROSCOPE_BOT_TOKEN}
    command: npm run horoscope_bot

  pdd_bot:
    image: node
    container_name: 'pdd_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=pdd_bot
      - BOT_NAME=pdd_bot
      - BOT_TOKEN=${PDD_BOT_TOKEN}
    command: npm run pdd_bot

  film_bot:
    image: node
    container_name: 'film_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=film_bot
      - BOT_TOKEN=${FILM_BOT_TOKEN}
      - BOT_NAME=film_bot
      - TMDB_KEY=${TMDB_V3_KEY}
    command: npm run film_bot

  present_bot:
    image: node
    container_name: 'present_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=present_bot
      - BOT_TOKEN=${PRESENT_BOT_TOKEN}
      - BOT_NAME=present_bot
    command: npm run present_bot

  symptoms_bot:
    image: node
    container_name: 'symptoms_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=symptoms_bot
      - BOT_TOKEN=${SYMPTOMS_BOT_TOKEN}
      - BOT_NAME=symptoms_bot
    command: npm run symptoms_bot

  disease_bot:
    image: node
    container_name: 'disease_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=disease_bot
      - BOT_TOKEN=${DISEASE_BOT_TOKEN}
      - BOT_NAME=disease_bot
    command: npm run disease_bot

  podcast_bot:
    image: node
    container_name: 'podcast_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=podcast_bot
      - BOT_TOKEN=${PODCAST_BOT_TOKEN}
      - BOT_NAME=podcast_bot
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    command: npm run podcast_bot

  finance_bot:
    image: node
    container_name: 'finance_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=finance_bot
      - BOT_TOKEN=${FINANCE_BOT_TOKEN}
      - BOT_NAME=finance_bot
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    command: npm run finance_bot

  business_bot:
    image: node
    container_name: 'business_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=business_bot
      - BOT_TOKEN=${BUSINESS_BOT_TOKEN}
      - BOT_NAME=business_bot
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - FF_LOGIN=${FF_LOGIN}
      - FF_PASSWORD=${FF_PASSWORD}
      - TELEGRAPH_TOKEN=${TELEGRAPH_TOKEN}
    command: npm run business_bot

  familyname_bot:
    image: node
    container_name: 'familyname_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=familyname_bot
      - BOT_TOKEN=${FAMILYNAME_BOT_TOKEN}
      - BOT_NAME=familyname_bot
    command: npm run familyname_bot

  refs_bot:
    image: node
    container_name: 'refs_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./backend:/var/backend
      - ./bot:/var/www
      - type: bind
        source: ./docker-compose-prod.yml
        target: /var/docker-compose.yml
      - type: bind
        source: ./.env
        target: /var/.env
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=refs_bot
      - BOT_TOKEN=${REFS_BOT_TOKEN}
      - BOT_NAME=refs_bot
    command: npm run refs_bot

  bookie_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_books"
    container_name: 'bookie_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - tgapi_proxy
    volumes:
      - ./bot:/var/www
      - /mnt/lib/files:/var/www/files
      - /mnt/lib/books/fb2.Flibusta.Net:/var/www/lib
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=bookie_bot
      - BOT_NAME=bookie_bot
      - BOT_TOKEN=${BOOKIE_BOT_TOKEN}
      - TGAPI_ROOT=https://tgapi_proxy
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - FILES_LOCAL_PATH=/var/www/files
      - FILES_REMOTE_PATH=/files
      - LIB_PATH=/var/www/lib
      - PROXY_DISABLED=${BOOKS_PROXY_DISABLED}
    command: node bots/books.js

  booksave_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_books"
    container_name: 'booksave_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - tgapi_proxy
    volumes:
      - ./bot:/var/www
      - /mnt/lib/files:/var/www/files
      - /mnt/lib/books/fb2.Flibusta.Net:/var/www/lib
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=booksave_bot
      - BOT_NAME=booksave_bot
      - BOT_TOKEN=${BOOKSAVE_BOT_TOKEN}
      - TGAPI_ROOT=https://tgapi_proxy
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - PERF_MONITOR=1
      - FILES_LOCAL_PATH=/var/www/files
      - FILES_REMOTE_PATH=/files
      - LIB_PATH=/var/www/lib
      - PROXY_DISABLED=${BOOKS_PROXY_DISABLED}
    command: node bots/books.js

  b3okie_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_books"
    container_name: 'b3okie_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - tgapi_proxy
    volumes:
      - ./bot:/var/www
      - /mnt/lib/files:/var/www/files
      - /mnt/lib/books/fb2.Flibusta.Net:/var/www/lib
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=b3okie_bot
      - BOT_NAME=b3okie_bot
      - BOT_TOKEN=${B3OKIE_BOT_TOKEN}
      - TGAPI_ROOT=https://tgapi_proxy
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - PERF_MONITOR=0
      - FILES_LOCAL_PATH=/var/www/files
      - FILES_REMOTE_PATH=/files
      - LIB_PATH=/var/www/lib
      - PROXY_DISABLED=${BOOKS_PROXY_DISABLED}
    command: node bots/books.js

  booksforfree_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_books"
    container_name: 'booksforfree_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - tgapi_proxy
    volumes:
      - ./bot:/var/www
      - /mnt/lib/files:/var/www/files
      - /mnt/lib/books/fb2.Flibusta.Net:/var/www/lib
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=booksforfree_bot
      - BOT_NAME=booksforfree_bot
      - BOT_TOKEN=${BOOKSFORFREE_BOT_TOKEN}
      - TGAPI_ROOT=https://tgapi_proxy
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - PERF_MONITOR=0
      - FILES_LOCAL_PATH=/var/www/files
      - FILES_REMOTE_PATH=/files
      - LIB_PATH=/var/www/lib
      - PROXY_DISABLED=${BOOKS_PROXY_DISABLED}
    command: node bots/books.js

  allbooks_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_books"
    container_name: 'allbooks_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - tgapi_proxy
    volumes:
      - ./bot:/var/www
      - /mnt/lib/files:/var/www/files
      - /mnt/lib/books/fb2.Flibusta.Net:/var/www/lib
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=allbooks_bot
      - BOT_NAME=allbooks_bot
      - BOT_TOKEN=${ALLBOOKS_BOT_TOKEN}
      - TGAPI_ROOT=https://tgapi_proxy
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - PERF_MONITOR=0
      - FILES_LOCAL_PATH=/var/www/files
      - FILES_REMOTE_PATH=/files
      - LIB_PATH=/var/www/lib
      - PROXY_DISABLED=${BOOKS_PROXY_DISABLED}
    command: node bots/books.js

  freereading_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_books"
    container_name: 'freereading_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - tgapi_proxy
    volumes:
      - ./bot:/var/www
      - /mnt/lib/files:/var/www/files
      - /mnt/lib/books/fb2.Flibusta.Net:/var/www/lib
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=freereading_bot
      - BOT_NAME=freereading_bot
      - BOT_TOKEN=${FREEREADING_BOT_TOKEN}
      - TGAPI_ROOT=https://tgapi_proxy
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - PERF_MONITOR=0
      - FILES_LOCAL_PATH=/var/www/files
      - FILES_REMOTE_PATH=/files
      - LIB_PATH=/var/www/lib
      - PROXY_DISABLED=${BOOKS_PROXY_DISABLED}
    command: node bots/books.js

  bookdow_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_books"
    container_name: 'bookdow_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - tgapi_proxy
    volumes:
      - ./bot:/var/www
      - /mnt/lib/files:/var/www/files
      - /mnt/lib/books/fb2.Flibusta.Net:/var/www/lib
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=bookdow_bot
      - BOT_NAME=bookdow_bot
      - BOT_TOKEN=${BOOKDOW_BOT_TOKEN}
      - TGAPI_ROOT=https://tgapi_proxy
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - PERF_MONITOR=0
      - FILES_LOCAL_PATH=/var/www/files
      - FILES_REMOTE_PATH=/files
      - LIB_PATH=/var/www/lib
      - PROXY_DISABLED=${BOOKS_PROXY_DISABLED}
    command: node bots/books.js

  dowread_bot:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_books"
    container_name: 'dowread_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - tgapi_proxy
    volumes:
      - ./bot:/var/www
      - /mnt/lib/files:/var/www/files
      - /mnt/lib/books/fb2.Flibusta.Net:/var/www/lib
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=dowread_bot
      - BOT_NAME=dowread_bot
      - BOT_TOKEN=${DOWREAD_BOT_TOKEN}
      - TGAPI_ROOT=https://tgapi_proxy
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - PERF_MONITOR=0
      - FILES_LOCAL_PATH=/var/www/files
      - FILES_REMOTE_PATH=/files
      - LIB_PATH=/var/www/lib
      - PROXY_DISABLED=1
    command: node bots/books.js

  workhant_bot:
    image: node
    container_name: 'workhant_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=workhant_bot
      - BOT_NAME=workhant_bot
      - BOT_TOKEN=${WORKHANT_BOT_TOKEN}
      - SKIP_HH=${WORKHANT_SKIP_HH}
      - RESTRICT_LOCAL_VACANCIES_TO_BOT=${WORKHANT_RESTRICT_LOCAL_VACANCIES_TO_BOT}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - 'HH_FILTER={"text": "NOT МТС"}'
    command: node bots/vacancies.js

  traineeship_bot:
    image: node
    container_name: 'traineeship_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=traineeship_bot
      - BOT_NAME=traineeship_bot
      - BOT_TOKEN=${TRAINEESHIP_BOT_TOKEN}
      - SKIP_HH=${TRAINEESHIP_SKIP_HH}
      - RESTRICT_LOCAL_VACANCIES_TO_BOT=${TRAINEESHIP_RESTRICT_LOCAL_VACANCIES_TO_BOT}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - 'HH_FILTER={"employment": "probation", "text": "NOT МТС"}'
    command: node bots/vacancies.js

  beembam_bot:
    image: node
    container_name: 'beembam_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=beembam_bot
      - BOT_NAME=beembam_bot
      - BOT_TOKEN=${BEEMBAM_BOT_TOKEN}
      - SKIP_HH=${BEEMBAM_SKIP_HH}
      - RESTRICT_LOCAL_VACANCIES_TO_BOT=${BEEMBAM_RESTRICT_LOCAL_VACANCIES_TO_BOT}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - 'HH_FILTER={"schedule": "remote", "text": "NOT МТС"}'
    command: node bots/vacancies.js

  coupon_bot:
    image: node
    container_name: 'coupon_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=coupon_bot
      - BOT_TOKEN=${COUPON_BOT_TOKEN}
      - BOT_NAME=coupon_bot
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - ADMITAD_CLIENT_ID=${ADMITAD_CLIENT_ID}
      - ADMITAD_CLIENT_SECRET=${ADMITAD_CLIENT_SECRET}
      - MONGO_TIMEOUT=3600
    command: node bots/coupons.js

  plumcore_bot:
    image: node
    container_name: 'plumcore_bot'
    restart: always
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/www
      - ./uploads:/var/www/files
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=plumcore_bot
      - BOT_TOKEN=${PLUMCORE_BOT_TOKEN}
      - BOT_NAME=plumcore_bot
      - YOO_SHOP_ID=${YOO_SHOP_ID}
      - YOO_SECRET_KEY=${YOO_SECRET_KEY}
      - YOO_TEST=${YOO_TEST}
      - FILES_DIR=/var/www/files
    command: node bots/plumcore.js

  linker_bot:
    image: node
    container_name: 'linker_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - telethon_userbot
    volumes:
      - ./bot:/var/www
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=linker_bot
      - BOT_TOKEN=${LINKER_BOT_TOKEN}
      - BOT_NAME=linker_bot
      - USERBOT_URL=http://telethon_userbot:3000
      - SECRET_HASH=${USERBOT_SECRET}
    command: node bots/linker.js

  mailer_bot:
    image: node
    container_name: 'mailer_bot'
    restart: always
    depends_on:
      - mongo
      - redis
      - tgapi_proxy
    volumes:
      - ./backend:/var/backend
      - ./uploads:/var/backend/uploads
      - ./bot:/var/www
      - type: bind
        source: ./docker-compose-prod.yml
        target: /var/docker-compose.yml
      - type: bind
        source: ./.env
        target: /var/.env
    working_dir: /var/www
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - REDIS_HOST=aquarium_redis
      - MONGO_DB=mailer_bot
      - BOT_TOKEN=${MAILER_BOT_TOKEN}
      - BOT_NAME=mailer_bot
      - IMGBB_TOKEN=${IMGBB_TOKEN}
      - TGAPI_ROOT=https://tgapi_proxy
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - UPLOAD_DIR=/var/backend/uploads
      - BASE_DOWNLOAD_URL=${BASE_DOWNLOAD_URL}
    command: npm run mailer_bot

  languagetool:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_languagetool"
    container_name: 'languagetool'
    restart: always
    working_dir: /LanguageTool-5.1
    command: "java -cp languagetool-server.jar  org.languagetool.server.HTTPServer --port 8010 --public --allow-origin '*'"

  unoconv:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_unoconv"

  mongo:
    image: mongo
    container_name: 'aquarium_mongo'
    restart: always
    volumes:
      - ./database:/data/db
    ports:
      - 127.0.0.1:${MONGO_PORT}:27017

  redis:
    image: redis
    restart: always
    container_name: 'aquarium_redis'

  admin:
    image: nginx
    restart: always
    container_name: 'bots_nginx'
    ports:
      - ${HTTP_PORT}:80
    volumes:
      - ./admin/dist:/var/www/public
      - ./uploads:/var/www/downloads
      - ./etc/nginx/site.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend

  admin_plumcore:
    image: nginx
    restart: always
    container_name: 'plumcore_nginx'
    ports:
      - ${PLUMCORE_HTTP_PORT}:80
    volumes:
      - ./adminPlumcore/dist:/var/www/public
      - ./etc/nginx/site.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend

  backend:
    image: node
    restart: always
    container_name: 'bots_backend'
    ports:
      - ${BACKEND_PORT}:3000
      - ${BACKEND_DEBUG_PORT}:9229
    depends_on:
      - mongo
      - redis
    volumes:
      - ./bot:/var/bot
      - ./backend:/var/www
      - ./backend:/var/backend
      - ./uploads:/var/backend/uploads
      - type: bind
        source: ./docker-compose-prod.yml
        target: /var/docker-compose.yml
      - type: bind
        source: ./.env
        target: /var/.env
      - type: bind
        source: ${BACKEND_RESTART_KEYFILE}
        target: /var/backend/restart.key
      - type: bind
        source: ./etc/scripts/restart_from_docker.sh
        target: /var/backend/restart.sh
      - type: bind
        source: ${BACKEND_STATUS_KEYFILE}
        target: /var/backend/status.key
      - type: bind
        source: ./etc/scripts/status_from_docker.sh
        target: /var/backend/status.sh
    working_dir: /var/backend
    environment:
      - NODE_ENV=development
      - MONGO_HOST=aquarium_mongo
      - MONGO_DB=botofarmer
      - REDIS_HOST=aquarium_redis
      - PG_HOST=${PG_HOST}
      - PG_PORT=${PG_PORT}
      - PG_USER=${PG_USER}
      - PG_PASS=${PG_PASS}
      - IMGBB_TOKEN=${IMGBB_TOKEN}
      - UPLOAD_DIR=/var/backend/uploads
      - BASE_DOWNLOAD_URL=${BASE_DOWNLOAD_URL}
      - RESTART_LOCATION=${BACKEND_RESTART_LOCATION}
      - REMOTE_RESTART_SCRIPT=${BACKEND_RESTART_SCRIPT}
      - RESTART_KEYFILE=/var/backend/restart.key
      - RESTART_SCRIPT=/var/backend/restart.sh
      - STATUS_LOCATION=${BACKEND_STATUS_LOCATION}
      - REMOTE_STATUS_SCRIPT=${BACKEND_STATUS_SCRIPT}
      - STATUS_KEYFILE=/var/backend/status.key
      - STATUS_SCRIPT=/var/backend/status.sh
    command: npm run debug

  userbot:
    restart: always
    build:
      context: "."
      dockerfile: "./build/Dockerfile_tdlib"
    ports:
      - ${USERBOT_DEBUG_PORT}:9229
      - ${USERBOT_HTTP_PORT}:3000
    depends_on:
      - mongo
    volumes:
      - ./userbot:/var/bot
    working_dir: /var/bot
    environment:
      - MONGO_HOST=aquarium_mongo
      - MONGO_DB=userbot
      - API_ID=${USERBOT_API_ID}
      - API_HASH=${USERBOT_API_HASH}
      - AUTH_PHONE=${USERBOT_AUTH_PHONE}
      - TDJSONLIB_PATH=${USERBOT_TDJSONLIB_PATH}
      - SECRET_HASH=${USERBOT_SECRET}
    command: npm run start

  telethon_userbot:
    restart: always
    build:
      context: "."
      dockerfile: "./etc/build/Dockerfile_telethon"
    ports:
      - ${TELETHON_PORT}:3000
    volumes:
      - ./telethonUserbot:/var/www
    working_dir: /var/www
    environment:
      - API_ID=${USERBOT_API_ID}
      - API_HASH=${USERBOT_API_HASH}
      - API_PHONE=${USERBOT_AUTH_PHONE}
      - SECRET_HASH=${USERBOT_SECRET}
      - PYTHONUNBUFFERED=1
    command: python bot.py

  tgapi_proxy:
    image: outrigger/https-proxy:1.0
    restart: always
    container_name: 'tgapi_proxy'
    depends_on:
      - tgapi
    environment:
      UPSTREAM_DOMAIN: tgapi
      UPSTREAM_PORT: 8081
      PROXY_DOMAIN: tgapi_proxy
      RATE_LIMIT: 0
      RATE_LIMIT_BURST_QUEUE: 0

  tgapi:
    build:
      context: "."
      dockerfile: "./build/Dockerfile_tgapi"
    container_name: 'tgapi'
    volumes:
      - /mnt/lib/files:/files
    restart: always
    command: telegram-bot-api --api-id ${API_ID} --api-hash ${API_HASH} --http-port=8081 --log=/proc/self/fd/1 --local

  monitor:
    image: node
    restart: always
    ports:
      - ${MONITOR_PORT}:3000
    volumes:
      - ./monitor:/var/monitor
      - type: bind
        source: ./docker-compose-prod.yml
        target: /var/monitor/docker-compose.yml
      - type: bind
        source: ./.env
        target: /var/monitor/.env
    working_dir: /var/monitor
    environment:
      - NODE_ENV=development
      - TGAPI_ROOT=https://tgapi_proxy
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - PORT=3000
    command: nodejs queue.js